# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  allergy: String
  role: UserRole!
}

enum UserRole {
  ADMIN
  MANAGER
  CLIENT
}

type Table {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  places: Float!
  available: Boolean!
}

type TableCreateOutput {
  table: Table!
}

type TableDeleteOutput {
  tableId: ID!
}

type TableUpdateOutput {
  table: Table!
}

type TablesPagination {
  totalCount: Float!
  nodes: [Table!]!
}

type UserCreateOutput {
  user: User!
}

type UserUpdateOutput {
  user: User!
}

type AuthLoginOutput {
  accessToken: String!
  role: String!
}

type Products {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  price: Float!
  tags: String!
  category: String!
}

type ProductsCreateOutput {
  products: Products!
}

type ProductsUpdateOutput {
  products: Products!
}

type ProductsDeleteOutput {
  productsId: ID!
}

type ProductsPagination {
  totalCount: Float!
  nodes: [Products!]!
}

type Menu {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  price: Float!
  entries: [MenuEntry!]!
  mainCourses: [MenuMainCourse!]!
  desserts: [MenuDessert!]!
}

type MenuEntry {
  title: String!
  description: String!
}

type MenuMainCourse {
  title: String!
  description: String!
}

type MenuDessert {
  title: String!
  description: String!
}

type MenuCreateOutput {
  menu: Menu!
}

type MenuUpdateOutput {
  menu: Menu!
}

type MenuDeleteOutput {
  menuId: ID!
}

type OpeningHours {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  dayOfWeek: Int!
  isClosed: Boolean!
  lunchOpeningTime: String
  lunchClosingTime: String
  dinnerOpeningTime: String
  dinnerClosingTime: String
}

type OpeningHoursCreateOutput {
  openingHours: OpeningHours!
}

type OpeningHoursUpdateOutput {
  openingHours: OpeningHours!
}

type Gallery {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  url: String!
  alt: String!
}

type GalleryCreateOutput {
  gallery: Gallery!
}

type GalleryUpdateOutput {
  gallery: Gallery!
}

type GalleryDeleteOutput {
  galleryId: ID!
}

type Query {
  sayHello: String!
  tablesPagination(skip: Int!, take: Int!, sortBy: SortDirection): TablesPagination!
  users: [User!]!
  user(id: String!): User!
  userGetByRole(role: String!): [User!]!
  userGetByRoles(roles: [String!]!): [User!]!
  productsPagination(skip: Int!, take: Int!, sortBy: SortDirection, category: String): ProductsPagination!
  getMenu(id: String!): Menu!
  getAllMenus: [Menu!]!
  openingHours: [OpeningHours!]!
  openingHoursById(id: String!): OpeningHours!
  getOpeningHoursForDay(dayOfWeek: Float!): OpeningHours!
  getAllGallery: [Gallery!]!
  getGalleryById(id: String!): Gallery!
}

enum SortDirection {
  ASC
  DESC
}

type Mutation {
  tableCreate(input: TableCreateInput!): TableCreateOutput!
  tableUpdate(tableId: ID!, input: TableUpdateInput!): TableUpdateOutput!
  tableDelete(tableId: ID!): TableDeleteOutput!
  authLogin(username: String!, password: String!): AuthLoginOutput!
  userCreate(input: UserCreateInput!): UserCreateOutput!
  userUpdate(id: String!, input: UserUpdateInput!): UserUpdateOutput!
  userDelete(id: String!): Boolean!
  productsCreate(input: ProductsCreateInput!): ProductsCreateOutput!
  productsUpdate(productsId: ID!, input: ProductsUpdateInput!): ProductsUpdateOutput!
  productsDelete(productsId: ID!): ProductsDeleteOutput!
  menuCreate(input: MenuCreateInput!): MenuCreateOutput!
  menuUpdate(menuId: ID!, input: MenuUpdateInput!): MenuUpdateOutput!
  menuDelete(menuId: ID!): MenuDeleteOutput!
  createOpeningHours(input: OpeningHoursCreateInput!): OpeningHoursCreateOutput!
  updateOpeningHours(id: ID!, input: OpeningHoursUpdateInput!): OpeningHoursUpdateOutput!
  DeleteOpeningHours(id: ID!): ID!
  galleryCreate(input: GalleryCreateInput!): GalleryCreateOutput!
  galleryUpdate(galleryId: ID!, input: GalleryUpdateInput!): GalleryUpdateOutput!
  galleryDelete(galleryId: ID!): GalleryDeleteOutput!
}

input TableCreateInput {
  title: String!
  places: Int! = 0
  available: Boolean!
}

input TableUpdateInput {
  title: String!
  places: Int! = 0
  available: Boolean!
}

input UserCreateInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  allergy: String
  role: UserRole!
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  allergy: String
  role: UserRole
}

input ProductsCreateInput {
  title: String!
  price: Float!
  tags: String!
  category: String!
}

input ProductsUpdateInput {
  title: String!
  price: Float!
  tags: String!
  category: String!
}

input MenuCreateInput {
  title: String!
  price: Int!
  entries: [MenuEntryInput!]!
  mainCourses: [MenuMainCourseInput!]!
  desserts: [MenuDessertInput!]!
}

input MenuEntryInput {
  title: String!
  description: String!
}

input MenuMainCourseInput {
  title: String!
  description: String!
}

input MenuDessertInput {
  title: String!
  description: String!
}

input MenuUpdateInput {
  title: String!
  price: Int!
  entries: [MenuEntryInput!]!
  mainCourses: [MenuMainCourseInput!]!
  desserts: [MenuDessertInput!]!
}

input OpeningHoursCreateInput {
  dayOfWeek: Int!
  isClosed: Boolean!
  lunchOpeningTime: String
  lunchClosingTime: String
  dinnerOpeningTime: String
  dinnerClosingTime: String
}

input OpeningHoursUpdateInput {
  dayOfWeek: Int!
  isClosed: Boolean!
  lunchOpeningTime: String
  lunchClosingTime: String
  dinnerOpeningTime: String
  dinnerClosingTime: String
}

input GalleryCreateInput {
  title: String!
  description: String!
  url: String!
  alt: String!
}

input GalleryUpdateInput {
  title: String!
  description: String!
  url: String!
  alt: String!
}