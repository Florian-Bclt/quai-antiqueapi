# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  allergy: String
  role: UserRole!
}

enum UserRole {
  ADMIN
  MANAGER
  CLIENT
}

type Reservation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  table: Table!
  date: DateTime!
  reservationHour: Int!
  reservationEndHour: Int!
  places: Int!
}

type Table {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  places: Float!
  available: Boolean!
}

type TableCreateOutput {
  table: Table!
}

type TableDeleteOutput {
  tableId: ID!
}

type TableUpdateOutput {
  table: Table!
}

type TablesPagination {
  totalCount: Float!
  nodes: [Table!]!
}

type UserCreateOutput {
  user: User!
}

type UserUpdateOutput {
  user: User!
}

type AuthLoginOutput {
  accessToken: String!
}

type Products {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  price: Float!
  tags: String!
  category: String!
}

type ProductsCreateOutput {
  products: Products!
}

type ProductsUpdateOutput {
  products: Products!
}

type ProductsDeleteOutput {
  productsId: ID!
}

type ProductsPagination {
  totalCount: Float!
  nodes: [Products!]!
}

type Menu {
  id: ID!
  title: String!
  price: Float!
  entries: [String!]!
  mainCourses: [String!]!
  desserts: [String!]!
}

type MenuCreateOutput {
  menu: Menu!
}

type MenuUpdateOutput {
  menu: Menu!
}

type MenuDeleteOutput {
  menuId: ID!
}

type OpeningHours {
  day: String!
  lunchOpeningTime: String!
  lunchClosingTime: String!
  dinnerOpeningTime: String!
  dinnerClosingTime: String!
}

type Query {
  sayHello: String!
  tablesPagination(skip: Int!, take: Int!, sortBy: SortDirection): TablesPagination!
  users: [User!]!
  user(id: String!): User!
  userGetByRole(role: String!): [User!]!
  productsPagination(skip: Int!, take: Int!, sortBy: SortDirection, category: String): ProductsPagination!
  getMenu(id: String!): Menu!
  getAllMenus: [Menu!]!
  getReservationById(reservationId: String!): Reservation!
  getReservationsByUser(userId: String!): [Reservation!]!
  getReservationsByTable(tableId: String!): [Reservation!]!
}

enum SortDirection {
  ASC
  DESC
}

type Mutation {
  tableCreate(input: TableCreateInput!): TableCreateOutput!
  tableUpdate(tableId: ID!, input: TableUpdateInput!): TableUpdateOutput!
  tableDelete(tableId: ID!): TableDeleteOutput!
  authLogin(username: String!, password: String!): AuthLoginOutput!
  userCreate(input: UserCreateInput!): UserCreateOutput!
  userUpdate(id: String!, input: UserUpdateInput!): UserUpdateOutput!
  userDelete(id: String!): Boolean!
  productsCreate(input: ProductsCreateInput!): ProductsCreateOutput!
  productsUpdate(productsId: ID!, input: ProductsUpdateInput!): ProductsUpdateOutput!
  productsDelete(productsId: ID!): ProductsDeleteOutput!
  menuCreate(input: MenuCreateInput!): MenuCreateOutput!
  menuUpdate(menuId: ID!, input: MenuUpdateInput!): MenuUpdateOutput!
  menuDelete(menuId: ID!): MenuDeleteOutput!
  createOpeningHours(input: OpeningHoursCreateInput!): OpeningHours!
  updateOpeningHours(id: String!, input: OpeningHoursUpdateInput!): OpeningHours!
  createReservation(userId: String!, reservation: ReservationCreateInput!): Reservation!
  updateReservation(reservationId: String!, reservation: ReservationUpdateInput!): Reservation!
  cancelReservation(reservationId: String!): String!
}

input TableCreateInput {
  title: String!
  places: Int! = 0
  available: Boolean!
}

input TableUpdateInput {
  title: String!
  places: Int! = 0
  available: Boolean!
}

input UserCreateInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  allergy: String
  role: UserRole!
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  allergy: String
  role: UserRole
}

input ProductsCreateInput {
  title: String!
  price: Float!
  tags: String!
  category: String!
}

input ProductsUpdateInput {
  title: String!
  price: Float!
  tags: String!
  category: String!
}

input MenuCreateInput {
  title: String!
  price: Float!
  entries: [String!]!
  mainCourses: [String!]!
  desserts: [String!]!
}

input MenuUpdateInput {
  title: String!
  price: Float!
  entries: [String!]!
  mainCourses: [String!]!
  desserts: [String!]!
}

input OpeningHoursCreateInput {
  id: ID!
  dayOfWeek: String!
  isClosed: Boolean!
  openTime: String
  closeTime: String
}

input OpeningHoursUpdateInput {
  id: ID!
  dayOfWeek: String!
  isClosed: Boolean!
  openTime: String
  closeTime: String
}

input ReservationCreateInput {
  guests: Int!
  date: DateTime!
  reservationHour: Int!
  tableId: String!
}

input ReservationUpdateInput {
  guests: Int!
  date: DateTime!
  reservationHour: Int!
  tableId: String!
  id: String!
}